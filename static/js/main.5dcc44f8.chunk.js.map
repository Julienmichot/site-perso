{"version":3,"sources":["components/SkillsArticle.js","components/Course.js","App.js","serviceWorker.js","index.js"],"names":["Skills","state","languages","nom","url","description","active","os","toggleDescription","name","index","findIndex","language","setState","displayDescription","className","this","map","key","onMouseEnter","onMouseLeave","src","alt","Component","Course","App","SkillsArticle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAuGeA,E,4MApGbC,MAAQ,CACNC,UAAW,CACT,CACEC,IAAK,aACLC,IAAK,gEACLC,YAAa,wDACbC,QAAQ,GAEV,CACEH,IAAK,QACLC,IACE,mFACFC,YAAa,yBACbC,QAAQ,GAEV,CACEH,IAAK,OACLC,IACE,2EACFC,YAAa,oBACbC,QAAQ,GAEV,CACEH,IAAK,YACLC,IAAK,qDACLC,YAAa,oBACbC,QAAQ,GAEV,CACEH,IAAK,UACLC,IACE,uEACFC,YAAa,oBACbC,QAAQ,GAEV,CACEH,IAAK,aACLC,IACE,iGACFC,YAAa,oBACbC,QAAQ,GAEV,CACEH,IAAK,SACLC,IACE,sEACFC,YAAa,0CACbC,QAAQ,IAGZC,GAAI,CACF,mEACA,mDACA,4F,EAIJC,kBAAoB,SAACC,GACnB,IAAMP,EAAS,YAAO,EAAKD,MAAMC,WAC3BQ,EAAQR,EAAUS,WAAU,SAACC,GAAD,OAAcA,EAAST,MAAQM,KACjEP,EAAUQ,GAAOJ,QAAUJ,EAAUQ,GAAOJ,OAC5C,EAAKO,SAAS,CAAEX,e,EAGlBY,mBAAqB,SAACF,GACpB,OACE,yBAAKG,UAAU,mBACb,4BAAKH,EAAST,KACd,2BAAIS,EAASP,e,uDAKT,IAAD,OACP,OACE,yBAAKU,UAAU,UACb,wBAAIA,UAAU,aAAd,kBACA,wBAAIA,UAAU,YACXC,KAAKf,MAAMC,UAAUe,KAAI,SAACL,GAAD,OACxB,wBACEG,UAAU,YACVG,IAAKN,EAAST,IACdgB,aAAc,kBAAM,EAAKX,kBAAkBI,EAAST,MACpDiB,aAAc,kBAAM,EAAKZ,kBAAkBI,EAAST,OAEpD,yBAAKkB,IAAKT,EAASR,IAAKkB,IAAKV,EAAST,MACrCS,EAASN,OAAS,EAAKQ,mBAAmBF,GAAY,UAI7D,yBAAKG,UAAU,MACZC,KAAKf,MAAMM,GAAGU,KAAI,SAACV,GAAD,OACjB,yBAAKc,IAAKd,EAAIe,IAAI,gB,GA7FTC,aCWNC,E,uKATP,OACI,yBAAKT,UAAU,UACX,wBAAIA,UAAU,aAAd,0B,GAJKQ,aCeNE,MAZf,WACE,OACE,yBAAKV,UAAU,OACb,oCACA,yBAAKA,UAAU,WACb,kBAACW,EAAD,MACA,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5dcc44f8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Skills extends Component {\n  state = {\n    languages: [\n      {\n        nom: \"JavaScript\",\n        url: \"https://www.developpez.net/forums/attachments/p294178d1/a/a/a\",\n        description: \"Appris à l'IUT Utilisé pour réaliser ce site\",\n        active: false,\n      },\n      {\n        nom: \"React\",\n        url:\n          \"https://blog.octo.com/wp-content/uploads/2015/12/react-logo-1000-transparent.png\",\n        description: \"Appris par moi-même\",\n        active: false,\n      },\n      {\n        nom: \"Java\",\n        url:\n          \"https://www.solutions-numeriques.com/wp-content/uploads/2016/03/java.png\",\n        description: \"Appris à l'IUT\",\n        active: false,\n      },\n      {\n        nom: \"Langage C\",\n        url: \"https://img.icons8.com/color/480/c-programming.png\",\n        description: \"Appris à l'IUT\",\n        active: false,\n      },\n      {\n        nom: \"Android\",\n        url:\n          \"https://www.arobasyk.com/wp-content/uploads/2019/10/Android-Logo.png\",\n        description: \"Appris à l'IUT\",\n        active: false,\n      },\n      {\n        nom: \"PostgreSQL\",\n        url:\n          \"https://dyltqmyl993wv.cloudfront.net/assets/stacks/postgresql/img/postgresql-stack-220x234.png\",\n        description: \"Appris à l'IUT\",\n        active: false,\n      },\n      {\n        nom: \"VSCode\",\n        url:\n          \"https://websetnet.net/wp-content/uploads/2019/04/vscode-icon245.png\",\n        description: \"Utilisé pour la plupart des langages\",\n        active: false,\n      },\n    ],\n    os: [\n      \"https://www.macway.com/blog/wp-content/uploads/2020/04/MacOS.png\",\n      \"https://www.dino-lite.eu/images/windows_logo.png\",\n      \"https://www.allinfoservice.fr/wp-content/uploads/2016/01/linux-logo-600x300-520x245.png\",\n    ],\n  };\n\n  toggleDescription = (name) => {\n    const languages = [...this.state.languages];\n    const index = languages.findIndex((language) => language.nom === name);\n    languages[index].active = !languages[index].active;\n    this.setState({ languages });\n  };\n\n  displayDescription = (language) => {\n    return (\n      <div className=\"logoDescription\">\n        <h3>{language.nom}</h3>\n        <p>{language.description}</p>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"skills\">\n        <h1 className=\"compTitle\">Compétences</h1>\n        <ul className=\"logoList\">\n          {this.state.languages.map((language) => (\n            <li\n              className=\"languages\"\n              key={language.nom}\n              onMouseEnter={() => this.toggleDescription(language.nom)}\n              onMouseLeave={() => this.toggleDescription(language.nom)}\n            >\n              <img src={language.url} alt={language.nom} />\n              {language.active ? this.displayDescription(language) : null}\n            </li>\n          ))}\n        </ul>\n        <div className=\"os\">\n          {this.state.os.map((os) => (\n            <img src={os} alt=\"OS\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Skills;\n","import React, { Component } from \"react\";\n\nclass Course extends Component {\n    render() {\n        return (\n            <div className=\"course\">\n                <h1 className=\"compTitle\">Parcours scolaire</h1>\n\n            </div>\n        );\n    }\n}\n\nexport default Course;","import React from \"react\";\nimport \"./App.css\";\nimport SkillsArticle from \"./components/SkillsArticle\";\nimport Course from \"./components/Course\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>YOLO</h1>\n      <div className=\"content\">\n        <SkillsArticle />\n        <Course />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}